
 /*private int anioMateria;---
    private int horasT;---
    private int horasP;---
    private int horasTP;---
    private int horasPE;---

       //0 = sin lab |  1 = lab de informatica | 
       //2 = lab para practicas experimentales | 3 = practicas docentes
    
    private int tipoPE; //AGREGAR A ARCHIVO.------- 
    private int cantInscriptos;-----------
    private int cantRindieron;--------
    */








public boolean aplicarFormula(boolean minimoUno){

/*      int horasP, horasPE, o, horasTP;
        float n;
        double qp;
        double qpe; */

        Expression e;

        for (Catedra cat : Estructura.catedras) {
            //n = (cat.getCantInscriptos() + cat.getCantRindieron())/2; //cantidad media de alumnos

            //horasP = cat.getHorasP();
            //horasTP = cat.getHorasTP();
            //horasPE = cat.getHorasPE();
            //o = horasP + horasPE + horasTP; // Horas practicas semanales

            // Para los casos de practicas con un menor numero de alumnos por docente
            // que lo que se establece en qp y qpe (cuando esto pasa estos valores valen menos que 1)
            // se consideraran los cocientes n/qp=1 y n/qpe=1
/*             qp = getQP(cat);
            if(qp < 1.f)
                qp = n;
            qpe = getQPE(cat);
            if(qpe < 1.f)
                qpe = n; */

            List<Argument> argumentos = this.generarArgumentos(cat);

            e = new Expression(Estructura.formula);
        
            this.cargarArgumentos(e, argumentos);

            int resultado = (int)Math.round(e.calculate());

            // Casos especiales
         /*    if(resultado == 0 && minimoUno)
                resultado = 1;
            if(cat.getCantDocentes() == 1 && resultado == 0)
                resultado = 1;
            if(cat.getCantDocentes() == 0 && resultado < 2)
                resultado = 2; */
            //evaluacion de la formula. Retorna Double.NaN en caso de error en la evaluacion
            Estructura.resultado.put(cat.getNombre(), resultado);
        }
        return true;
    }




    /**
     * Calcula la proporcion de alumnos por docente de cada anio.
     * @param catedraAsociada el parametro define un objeto de tipo Catedra.
     * @return un Double que es el resultado de docentes segun el anio de la materia.
     */

    public  Double  getQP (Catedra catedraAsociada){ 
        Double resultado= 1.0;
   /*      if ((catedraAsociada.getHorasTP() == 0 ) && (catedraAsociada.getHorasP() == 0))
            return resultado;
        if (catedraAsociada.getAnioMateria() < 3)
            resultado = Math.ceil( (double) catedraAsociada.getCantInscriptos()/ConstanteFormula.cantAlumnosDocentePrimeros);
        else
            resultado = Math.ceil( (double) catedraAsociada.getCantInscriptos()/ConstanteFormula.cantAlumnosDocenteUltimos);
    */     return resultado;    
    }

    /**
     * Calcula la proporcion de alumnos por docente segun el tipo de practica especial.
     * @param catedraAsociada el parametro define un objeto de tipo Catedra.
     * @return un Double que es el resultado de docentes segun el tipo de practica especial.
     */
    public  Double  getQPE (Catedra catedraAsociada){
        Double resultado= 1.0;
/*         if ((catedraAsociada.getHorasTP() == 0 ) && (catedraAsociada.getHorasP() == 0))
            return resultado;
            
        switch(catedraAsociada.getTipoPE()) {
            case 0:
                return resultado;
            case 1:
                //"Corresponde al laboratorio con informatica"
                return Math.ceil(catedraAsociada.getCantInscriptos()/ConstanteFormula.cantAlumnosPE_lab);
            case 2:
                //"Corresponde al laboratorio experimental"
                return Math.ceil(catedraAsociada.getCantInscriptos()/ConstanteFormula.cantAlumnosPE_lab_exp);
            case 3:
                //"Corresponde a las calses de practicas docentes"
                return Math.ceil(catedraAsociada.getCantInscriptos()/ConstanteFormula.cantAlumnosPE_alumnos_docentes);
            default:
                //"La catedra no presenta practicas especiales"
                return -1.0;
            } */

            return resultado;
    }



    /**
     * Dada una catedra, que almacena los datos que se leen directos de los archivos,
     * se crear las variables que se utilizaran en la expresion de la formula
     * @param cat catedra que contiene los datos "fuente"
     * @return una lista con los argumentos que se agregaran a la expresion
     */
    private List<Argument> generarArgumentos(Catedra cat) {
        List<Argument> retorno = new ArrayList<>();
        
        Set<String> variablesDeLaFormula = this.getVariables(); 

        for (String var : variablesDeLaFormula) {
            Traductor tr = Fabrica.getVariableObj(var, cat);//TODO: verficar el getValue
            Argument argument = new Argument(var, tr.getValue());
            retorno.add(argument);
        }

        return retorno;
    }